#! /usr/bin/env python3

import argparse
import logging
import os
from argparse import RawTextHelpFormatter

from vshot.vshot import VShot

root = logging.getLogger("root")

logger = logging.getLogger(__name__)
FORMAT = "%(asctime)-15s - %(message)s"
logger.setLevel(logging.ERROR)
logging.basicConfig(format=FORMAT)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        formatter_class=RawTextHelpFormatter,
        description=(
            """
             _    __     __          __
            | |  / /____/ /_  ____  / /_
            | | / / ___/ __ \/ __ \/ __/
            | |/ (__  ) / / / /_/ / /_
            |___/____/_/ /_/\____/\__/

            ~> Verity Screenshot Companion
            """
        ),
    )

    parser.add_argument(
        "--url", dest="url", required=True, help="URL to take a screenshot from"
    )

    parser.add_argument(
        "--no-js", dest="nojs", action="store_true", help="Disable Javascript on Chrome"
    )

    parser.add_argument(
        "--save-html",
        dest="save_html",
        action="store_true",
        help="Store DOM HTML page",
    )

    parser.add_argument(
        "--save-s3",
        dest="save_s3",
        type=str,
        help="Store all produced assets to AWS S3",
    )

    parser.add_argument(
        "--above-the-fold",
        dest="above_the_fold",
        action="store_true",
        help="Takes an above-the-fold webpage screenshot",
    )

    parser.add_argument(
        "--fullpage",
        dest="fullpage",
        action="store_true",
        help="Takes a fullpage screenshot from top to bottom on the webpage",
    )

    args = parser.parse_args()

    logger.info(
        f"VShot running on URL {args.url} with Javascript {'disabled' if args.nojs else 'enabled'}"
    )

    engine = VShot(nojs=args.nojs)

    # Map that contains VShot output results
    shots = {}

    try:
        if args.fullpage:
            logger.info(f"ðŸŒ€ Taking a fullpage screenshot of {args.url}")
            output = engine.take_screenshot(url=args.url, size="fullpage")
            shots[os.path.basename(output)] = output

        if args.above_the_fold:
            logger.info(f"ðŸŒ€ Taking an above-the-fold screenshot of {args.url}")
            output = engine.take_screenshot(url=args.url, size="abovethefold")
            shots[os.path.basename(output)] = output

        if args.save_html:
            logger.info(f"ðŸŒ€ Saving HTML DOM from {args.url}")
            output = engine.save_html(url=args.url)
            shots[os.path.basename(output)] = output

        if args.save_s3:
            logger.info(f"ðŸŒ€ Saving shots to {args.save_s3}")
            output = engine.save_s3(url=args.url, s3_uri=args.save_s3, shots=shots)

        for name, shot in shots.items():
            logger.info(
                f"ðŸ“Œ [{name}] {shot.replace(os.path.expanduser('~'), '~', 1)} has been stored"
            )

    finally:
        engine.teardown()
